{"uid":"bdf9cecd6862137f","name":"Добавление рандомного товара в корзину с главной страницы","fullName":"tests.use_cases.test_add_to_cart#test_add_item_to_cart","historyId":"fc04b2196139653631221935be8f3ffe","time":{"start":1718291940920,"stop":1718291947976,"duration":7056},"status":"broken","statusMessage":"selenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element is not clickable at point (355, 1040)\n  (Session info: chrome=125.0.6422.144)\nStacktrace:\n\tGetHandleVerifier [0x00007FF6C8C91F52+60322]\n\t(No symbol) [0x00007FF6C8C0CEC9]\n\t(No symbol) [0x00007FF6C8AC7EBA]\n\t(No symbol) [0x00007FF6C8B1F32E]\n\t(No symbol) [0x00007FF6C8B1CCF2]\n\t(No symbol) [0x00007FF6C8B1A18B]\n\t(No symbol) [0x00007FF6C8B19356]\n\t(No symbol) [0x00007FF6C8B0B491]\n\t(No symbol) [0x00007FF6C8B3C21A]\n\t(No symbol) [0x00007FF6C8B0ADB6]\n\t(No symbol) [0x00007FF6C8B3C430]\n\t(No symbol) [0x00007FF6C8B5BC80]\n\t(No symbol) [0x00007FF6C8B3BFC3]\n\t(No symbol) [0x00007FF6C8B09617]\n\t(No symbol) [0x00007FF6C8B0A211]\n\tGetHandleVerifier [0x00007FF6C8FA94AD+3301629]\n\tGetHandleVerifier [0x00007FF6C8FF36D3+3605283]\n\tGetHandleVerifier [0x00007FF6C8FE9450+3563680]\n\tGetHandleVerifier [0x00007FF6C8D44326+790390]\n\t(No symbol) [0x00007FF6C8C1750F]\n\t(No symbol) [0x00007FF6C8C13404]\n\t(No symbol) [0x00007FF6C8C13592]\n\t(No symbol) [0x00007FF6C8C02F9F]\n\tBaseThreadInitThunk [0x00007FFFD8737344+20]\n\tRtlUserThreadStart [0x00007FFFD8E7CC91+33]","statusTrace":"browser = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"a06a57f45588e6e076f98d696ad521fd\")>, url = 'http://192.168.2.122:8081/'\n\n    @allure.title(\"Добавление рандомного товара в корзину с главной страницы\")\n    def test_add_item_to_cart(browser, url):\n        browser.get(url)\n>       HomePage(browser).add_random_item_to_cart()\n\ntests\\use_cases\\test_add_to_cart.py:14: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\npage_objects\\home_page.py:20: in add_random_item_to_cart\n    self.browser.find_elements(*self.ADD_TO_CART_BUTTONS)[a].click()\nvenv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webelement.py:94: in click\n    self._execute(Command.CLICK_ELEMENT)\nvenv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webelement.py:395: in _execute\n    return self._parent.execute(command, params)\nvenv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:347: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x000001B65F734A10>\nresponse = {'status': 400, 'value': '{\"value\":{\"error\":\"element click intercepted\",\"message\":\"element click intercepted: Element ...07FF6C8C02F9F]\\\\n\\\\tBaseThreadInitThunk [0x00007FFFD8737344+20]\\\\n\\\\tRtlUserThreadStart [0x00007FFFD8E7CC91+33]\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element is not clickable at point (355, 1040)\nE         (Session info: chrome=125.0.6422.144)\nE       Stacktrace:\nE       \tGetHandleVerifier [0x00007FF6C8C91F52+60322]\nE       \t(No symbol) [0x00007FF6C8C0CEC9]\nE       \t(No symbol) [0x00007FF6C8AC7EBA]\nE       \t(No symbol) [0x00007FF6C8B1F32E]\nE       \t(No symbol) [0x00007FF6C8B1CCF2]\nE       \t(No symbol) [0x00007FF6C8B1A18B]\nE       \t(No symbol) [0x00007FF6C8B19356]\nE       \t(No symbol) [0x00007FF6C8B0B491]\nE       \t(No symbol) [0x00007FF6C8B3C21A]\nE       \t(No symbol) [0x00007FF6C8B0ADB6]\nE       \t(No symbol) [0x00007FF6C8B3C430]\nE       \t(No symbol) [0x00007FF6C8B5BC80]\nE       \t(No symbol) [0x00007FF6C8B3BFC3]\nE       \t(No symbol) [0x00007FF6C8B09617]\nE       \t(No symbol) [0x00007FF6C8B0A211]\nE       \tGetHandleVerifier [0x00007FF6C8FA94AD+3301629]\nE       \tGetHandleVerifier [0x00007FF6C8FF36D3+3605283]\nE       \tGetHandleVerifier [0x00007FF6C8FE9450+3563680]\nE       \tGetHandleVerifier [0x00007FF6C8D44326+790390]\nE       \t(No symbol) [0x00007FF6C8C1750F]\nE       \t(No symbol) [0x00007FF6C8C13404]\nE       \t(No symbol) [0x00007FF6C8C13592]\nE       \t(No symbol) [0x00007FF6C8C02F9F]\nE       \tBaseThreadInitThunk [0x00007FFFD8737344+20]\nE       \tRtlUserThreadStart [0x00007FFFD8E7CC91+33]\n\nvenv\\Lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:229: ElementClickInterceptedException","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"browser","time":{"start":1718291937809,"stop":1718291940918,"duration":3109},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"attachmentsCount":0,"stepsCount":0,"attachmentStep":false,"hasContent":false},{"name":"url","time":{"start":1718291940919,"stop":1718291940920,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"attachmentsCount":0,"stepsCount":0,"attachmentStep":false,"hasContent":false}],"testStage":{"status":"broken","statusMessage":"selenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element is not clickable at point (355, 1040)\n  (Session info: chrome=125.0.6422.144)\nStacktrace:\n\tGetHandleVerifier [0x00007FF6C8C91F52+60322]\n\t(No symbol) [0x00007FF6C8C0CEC9]\n\t(No symbol) [0x00007FF6C8AC7EBA]\n\t(No symbol) [0x00007FF6C8B1F32E]\n\t(No symbol) [0x00007FF6C8B1CCF2]\n\t(No symbol) [0x00007FF6C8B1A18B]\n\t(No symbol) [0x00007FF6C8B19356]\n\t(No symbol) [0x00007FF6C8B0B491]\n\t(No symbol) [0x00007FF6C8B3C21A]\n\t(No symbol) [0x00007FF6C8B0ADB6]\n\t(No symbol) [0x00007FF6C8B3C430]\n\t(No symbol) [0x00007FF6C8B5BC80]\n\t(No symbol) [0x00007FF6C8B3BFC3]\n\t(No symbol) [0x00007FF6C8B09617]\n\t(No symbol) [0x00007FF6C8B0A211]\n\tGetHandleVerifier [0x00007FF6C8FA94AD+3301629]\n\tGetHandleVerifier [0x00007FF6C8FF36D3+3605283]\n\tGetHandleVerifier [0x00007FF6C8FE9450+3563680]\n\tGetHandleVerifier [0x00007FF6C8D44326+790390]\n\t(No symbol) [0x00007FF6C8C1750F]\n\t(No symbol) [0x00007FF6C8C13404]\n\t(No symbol) [0x00007FF6C8C13592]\n\t(No symbol) [0x00007FF6C8C02F9F]\n\tBaseThreadInitThunk [0x00007FFFD8737344+20]\n\tRtlUserThreadStart [0x00007FFFD8E7CC91+33]","statusTrace":"browser = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"a06a57f45588e6e076f98d696ad521fd\")>, url = 'http://192.168.2.122:8081/'\n\n    @allure.title(\"Добавление рандомного товара в корзину с главной страницы\")\n    def test_add_item_to_cart(browser, url):\n        browser.get(url)\n>       HomePage(browser).add_random_item_to_cart()\n\ntests\\use_cases\\test_add_to_cart.py:14: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\npage_objects\\home_page.py:20: in add_random_item_to_cart\n    self.browser.find_elements(*self.ADD_TO_CART_BUTTONS)[a].click()\nvenv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webelement.py:94: in click\n    self._execute(Command.CLICK_ELEMENT)\nvenv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webelement.py:395: in _execute\n    return self._parent.execute(command, params)\nvenv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:347: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x000001B65F734A10>\nresponse = {'status': 400, 'value': '{\"value\":{\"error\":\"element click intercepted\",\"message\":\"element click intercepted: Element ...07FF6C8C02F9F]\\\\n\\\\tBaseThreadInitThunk [0x00007FFFD8737344+20]\\\\n\\\\tRtlUserThreadStart [0x00007FFFD8E7CC91+33]\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element is not clickable at point (355, 1040)\nE         (Session info: chrome=125.0.6422.144)\nE       Stacktrace:\nE       \tGetHandleVerifier [0x00007FF6C8C91F52+60322]\nE       \t(No symbol) [0x00007FF6C8C0CEC9]\nE       \t(No symbol) [0x00007FF6C8AC7EBA]\nE       \t(No symbol) [0x00007FF6C8B1F32E]\nE       \t(No symbol) [0x00007FF6C8B1CCF2]\nE       \t(No symbol) [0x00007FF6C8B1A18B]\nE       \t(No symbol) [0x00007FF6C8B19356]\nE       \t(No symbol) [0x00007FF6C8B0B491]\nE       \t(No symbol) [0x00007FF6C8B3C21A]\nE       \t(No symbol) [0x00007FF6C8B0ADB6]\nE       \t(No symbol) [0x00007FF6C8B3C430]\nE       \t(No symbol) [0x00007FF6C8B5BC80]\nE       \t(No symbol) [0x00007FF6C8B3BFC3]\nE       \t(No symbol) [0x00007FF6C8B09617]\nE       \t(No symbol) [0x00007FF6C8B0A211]\nE       \tGetHandleVerifier [0x00007FF6C8FA94AD+3301629]\nE       \tGetHandleVerifier [0x00007FF6C8FF36D3+3605283]\nE       \tGetHandleVerifier [0x00007FF6C8FE9450+3563680]\nE       \tGetHandleVerifier [0x00007FF6C8D44326+790390]\nE       \t(No symbol) [0x00007FF6C8C1750F]\nE       \t(No symbol) [0x00007FF6C8C13404]\nE       \t(No symbol) [0x00007FF6C8C13592]\nE       \t(No symbol) [0x00007FF6C8C02F9F]\nE       \tBaseThreadInitThunk [0x00007FFFD8737344+20]\nE       \tRtlUserThreadStart [0x00007FFFD8E7CC91+33]\n\nvenv\\Lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:229: ElementClickInterceptedException","steps":[{"name":"Добавляю рандомный товар в корзину","time":{"start":1718291942694,"stop":1718291947961,"duration":5267},"status":"broken","statusMessage":"selenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element is not clickable at point (355, 1040)\n  (Session info: chrome=125.0.6422.144)\nStacktrace:\n\tGetHandleVerifier [0x00007FF6C8C91F52+60322]\n\t(No symbol) [0x00007FF6C8C0CEC9]\n\t(No symbol) [0x00007FF6C8AC7EBA]\n\t(No symbol) [0x00007FF6C8B1F32E]\n\t(No symbol) [0x00007FF6C8B1CCF2]\n\t(No symbol) [0x00007FF6C8B1A18B]\n\t(No symbol) [0x00007FF6C8B19356]\n\t(No symbol) [0x00007FF6C8B0B491]\n\t(No symbol) [0x00007FF6C8B3C21A]\n\t(No symbol) [0x00007FF6C8B0ADB6]\n\t(No symbol) [0x00007FF6C8B3C430]\n\t(No symbol) [0x00007FF6C8B5BC80]\n\t(No symbol) [0x00007FF6C8B3BFC3]\n\t(No symbol) [0x00007FF6C8B09617]\n\t(No symbol) [0x00007FF6C8B0A211]\n\tGetHandleVerifier [0x00007FF6C8FA94AD+3301629]\n\tGetHandleVerifier [0x00007FF6C8FF36D3+3605283]\n\tGetHandleVerifier [0x00007FF6C8FE9450+3563680]\n\tGetHandleVerifier [0x00007FF6C8D44326+790390]\n\t(No symbol) [0x00007FF6C8C1750F]\n\t(No symbol) [0x00007FF6C8C13404]\n\t(No symbol) [0x00007FF6C8C13592]\n\t(No symbol) [0x00007FF6C8C02F9F]\n\tBaseThreadInitThunk [0x00007FFFD8737344+20]\n\tRtlUserThreadStart [0x00007FFFD8E7CC91+33]\n\n","statusTrace":"  File \"C:\\Users\\allet\\IdeaProjects\\Otus\\Python_QA_Selenium_Study\\venv\\Lib\\site-packages\\allure_commons\\_allure.py\", line 192, in impl\n    return func(*a, **kw)\n           ^^^^^^^^^^^^^^\n  File \"C:\\Users\\allet\\IdeaProjects\\Otus\\Python_QA_Selenium_Study\\page_objects\\home_page.py\", line 20, in add_random_item_to_cart\n    self.browser.find_elements(*self.ADD_TO_CART_BUTTONS)[a].click()\n  File \"C:\\Users\\allet\\IdeaProjects\\Otus\\Python_QA_Selenium_Study\\venv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webelement.py\", line 94, in click\n    self._execute(Command.CLICK_ELEMENT)\n  File \"C:\\Users\\allet\\IdeaProjects\\Otus\\Python_QA_Selenium_Study\\venv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webelement.py\", line 395, in _execute\n    return self._parent.execute(command, params)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"C:\\Users\\allet\\IdeaProjects\\Otus\\Python_QA_Selenium_Study\\venv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py\", line 347, in execute\n    self.error_handler.check_response(response)\n  File \"C:\\Users\\allet\\IdeaProjects\\Otus\\Python_QA_Selenium_Study\\venv\\Lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py\", line 229, in check_response\n    raise exception_class(message, screen, stacktrace)\n","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"attachmentsCount":0,"stepsCount":0,"attachmentStep":false,"hasContent":true}],"attachments":[{"uid":"b35abdb4a155a99c","name":"log","source":"b35abdb4a155a99c.txt","type":"text/plain","size":390}],"parameters":[],"shouldDisplayMessage":true,"attachmentsCount":1,"stepsCount":1,"attachmentStep":false,"hasContent":true},"afterStages":[{"name":"browser::1","time":{"start":1718291948378,"stop":1718291948378,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"attachmentsCount":0,"stepsCount":0,"attachmentStep":false,"hasContent":false},{"name":"browser::fin","time":{"start":1718291948378,"stop":1718291952718,"duration":4340},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"attachmentsCount":0,"stepsCount":0,"attachmentStep":false,"hasContent":false}],"labels":[{"name":"parentSuite","value":"tests.use_cases"},{"name":"suite","value":"test_add_to_cart"},{"name":"host","value":"LAPTOP-HDELO55A"},{"name":"thread","value":"13748-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.use_cases.test_add_to_cart"},{"name":"resultFormat","value":"allure2"}],"parameters":[],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"tags":[]},"source":"bdf9cecd6862137f.json","parameterValues":[]}